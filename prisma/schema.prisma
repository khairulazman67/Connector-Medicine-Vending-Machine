// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionHistoryType {
  DEBIT //Penambahan stok
  CREDIT //Pengurangan stok
}

enum TransactionHistoryStatus {
  TAKING
  STOCKOPNAME
}

enum StockOpnameStatus {
  OPEN
  PROCESS
  COMPLETED
}
model Fasyankes{
  id                  Int         @id @default(autoincrement())
  fasyankesCode       String      @map("fasyankes_code")         @db.VarChar(10)
  name                String      @map("name")                   @db.VarChar(100)
  VendingMachine       VendingMachine[]
}

model VendingMachine {
  id Int                        @id @default(autoincrement())
  name String                   
  idFasyankes Int               @map("fasyankes_id")          
  isPaperlessHospital           Boolean  @default(true) @map("is_paperless_hospital")
  fasyankes  Fasyankes          @relation(fields: [idFasyankes], references: [id]) 
  
  etalase  Etalase[]      
  vendingMachine  TransactionHistory[]
  stockOpname StockOpname[]
  locking Locking[]
}

model Etalase{
  id Int                          @id @default(autoincrement())
  vmId           Int              @map("vm_id") 
  displayCode String              @map("display_code")   @db.VarChar(10)    
  itemCode String                 @map("item_code")      @db.VarChar(10)
  medicineName String             @map("medicine_name")  @db.VarChar(100)
  maxStock Int                    @map("max_stock")       
  stock Int                       @map("stock") 
   
  vendingMachine  VendingMachine  @relation(fields: [vmId], references: [id]) 
  stockOpnameDetail StockOpnameDetail[]

  @@unique([vmId, itemCode]) 
} 

model TransactionHistory{
  id    Int                       @id @default(autoincrement())
  vmId  Int                       @map("vm_id")
  displayCode String              @map("display_code")
  itemCode String                 @map("itemCode") @db.VarChar(10) 
  firstStock Int                  @map("first_stock")
  lastStock Int                   @map("last_stock")
  createdAt  DateTime             @default(now())
  transactionType TransactionHistoryType   @map("transaction_type")
  status TransactionHistoryStatus @map("status")
  note String                     @map("note")
  vendingMachine  VendingMachine  @relation(fields: [vmId], references: [id])
} 
model StockOpname{
  id    Int                       @id @default(autoincrement())
  soCode String                   @map("so_code") @unique @db.VarChar(15)
  vmId  Int                       @map("vm_id")
  note String                     @map("note")
  soDateTime  DateTime            @default(now()) @map("so_date_time")
  createdAt  DateTime             @default(now()) @map("created_at")
  status StockOpnameStatus      
  vendingMachine  VendingMachine  @relation(fields: [vmId], references: [id])
  details StockOpnameDetail[]
}

model StockOpnameDetail{
  id    Int                       @id @default(autoincrement())
  soId Int                        @map("so_id")
  etalaseId Int                   @map("etalase_id")
  stock Int                       @map("stock")
  realStock Int                   @map("real_stock")
  stockOpname  StockOpname        @relation(fields: [soId], references: [id]) 
  etalase  Etalase                @relation(fields: [etalaseId], references: [id]) 
} 

model Locking{
  id    Int                       @id @default(autoincrement())
  vmId  Int                       @map("vm_id") @unique
  message String
  vendingMachine  VendingMachine  @relation(fields: [vmId], references: [id])
}